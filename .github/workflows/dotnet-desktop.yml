name: Continuous Integration

on:
  push:
    branches: [ "main" ]
  pull_request:
    types: [opened, synchronize]
    branches: [ "main" ]

# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
jobs:

  build: 

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Products.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: Products\Products.csproj         # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
      
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2

    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create the app package
      run: msbuild 
      #$env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      #env:
        #Appx_Bundle: Always
        #Appx_Bundle_Platforms: x86|x64
        #Appx_Package_Build_Mode: StoreUpload
        #Configuration: ${{ matrix.configuration }}